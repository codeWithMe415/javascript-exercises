# JavaScript Loop Challenges: Beginner to Advanced
*70 Progressive Challenges to Master Loops*

## Table of Contents
- [Beginner Challenges (1-20)](#beginner-challenges)
- [Intermediate Challenges (21-45)](#intermediate-challenges)
- [Advanced Challenges (46-70)](#advanced-challenges)

---

## Beginner Challenges

### Challenge 1: Count to 10
**Instructions:** Write a for loop that prints numbers from 1 to 10.
**Expected Output:** 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
**Reference:** [MDN For Loop](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for)

### Challenge 2: Count Backwards
**Instructions:** Write a for loop that prints numbers from 10 to 1.
**Expected Output:** 10, 9, 8, 7, 6, 5, 4, 3, 2, 1
**Reference:** [MDN For Loop](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for)

### Challenge 3: Even Numbers
**Instructions:** Print all even numbers from 2 to 20.
**Expected Output:** 2, 4, 6, 8, 10, 12, 14, 16, 18, 20
**Reference:** [Even and Odd Numbers](https://www.mathsisfun.com/definitions/even-number.html)

### Challenge 4: Odd Numbers
**Instructions:** Print all odd numbers from 1 to 19.
**Expected Output:** 1, 3, 5, 7, 9, 11, 13, 15, 17, 19
**Reference:** [Even and Odd Numbers](https://www.mathsisfun.com/definitions/odd-number.html)

### Challenge 5: Sum of Numbers
**Instructions:** Calculate the sum of numbers from 1 to 100.
**Expected Output:** 5050
**Reference:** [Arithmetic Series](https://www.mathsisfun.com/algebra/sequences-sums-arithmetic.html)

### Challenge 6: Array Iteration
**Instructions:** Given an array `[1, 2, 3, 4, 5]`, print each element using a for loop.
**Reference:** [MDN Arrays](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array)

### Challenge 7: String Characters
**Instructions:** Print each character of the string "Hello" on a new line.
**Expected Output:** H, e, l, l, o
**Reference:** [MDN String Methods](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String)

### Challenge 8: Multiplication Table
**Instructions:** Print the multiplication table for 5 (5 x 1 through 5 x 10).
**Expected Output:** 5, 10, 15, 20, 25, 30, 35, 40, 45, 50
**Reference:** [Multiplication Tables](https://www.mathsisfun.com/tables.html)

### Challenge 9: While Loop Counter
**Instructions:** Use a while loop to count from 1 to 5.
**Reference:** [MDN While Loop](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/while)

### Challenge 10: Do-While Example
**Instructions:** Use a do-while loop to print "Hello" 3 times.
**Reference:** [MDN Do-While Loop](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/do...while)

### Challenge 11: Array Sum
**Instructions:** Calculate the sum of all elements in array `[10, 20, 30, 40, 50]`.
**Expected Output:** 150
**Reference:** [Array Reduce Method](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce)

### Challenge 12: Find Maximum
**Instructions:** Find the largest number in array `[3, 7, 2, 9, 1]`.
**Expected Output:** 9
**Reference:** [Math.max() Method](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/max)

### Challenge 13: Count Vowels
**Instructions:** Count the number of vowels in the string "programming".
**Expected Output:** 3
**Reference:** [String charAt Method](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/charAt)

### Challenge 14: Reverse String
**Instructions:** Reverse the string "hello" using a loop.
**Expected Output:** "olleh"
**Reference:** [String Reversal Techniques](https://www.freecodecamp.org/news/how-to-reverse-a-string-in-javascript-in-3-different-ways-75e4763c68cb/)

### Challenge 15: Skip Numbers
**Instructions:** Print numbers 1 to 10, but skip 5 using continue.
**Expected Output:** 1, 2, 3, 4, 6, 7, 8, 9, 10
**Reference:** [MDN Continue Statement](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/continue)

### Challenge 16: Break on Condition
**Instructions:** Print numbers 1 to 10, but stop when you reach 7 using break.
**Expected Output:** 1, 2, 3, 4, 5, 6
**Reference:** [MDN Break Statement](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/break)

### Challenge 17: Nested Loop Pattern
**Instructions:** Create a 3x3 grid of asterisks (*) using nested loops.
```
***
***
***
```
**Reference:** [Nested Loops Tutorial](https://www.programiz.com/javascript/nested-for-loop)

### Challenge 18: Count Down Timer
**Instructions:** Create a countdown from 5 to 0 using a while loop.
**Expected Output:** 5, 4, 3, 2, 1, 0
**Reference:** [JavaScript Timers](https://developer.mozilla.org/en-US/docs/Web/API/setTimeout)

### Challenge 19: For-In Loop
**Instructions:** Use a for-in loop to iterate over object properties: `{name: "John", age: 30, city: "NYC"}`.
**Reference:** [MDN For-In Loop](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in)

### Challenge 20: For-Of Loop
**Instructions:** Use a for-of loop to iterate over array `["apple", "banana", "cherry"]`.
**Reference:** [MDN For-Of Loop](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of)

---

## Intermediate Challenges

### Challenge 21: Factorial Calculator
**Instructions:** Calculate the factorial of 5 using a loop (5! = 5 × 4 × 3 × 2 × 1).
**Expected Output:** 120
**Reference:** [Wikipedia Factorial](https://en.wikipedia.org/wiki/Factorial)

### Challenge 22: Fibonacci Sequence
**Instructions:** Generate the first 10 numbers of the Fibonacci sequence.
**Expected Output:** 0, 1, 1, 2, 3, 5, 8, 13, 21, 34
**Reference:** [Wikipedia Fibonacci](https://en.wikipedia.org/wiki/Fibonacci_number)

### Challenge 23: Prime Number Checker
**Instructions:** Check if a number (e.g., 17) is prime using a loop.
**Expected Output:** true (for 17)
**Reference:** [Wikipedia Prime Numbers](https://en.wikipedia.org/wiki/Prime_number)

### Challenge 24: Array Filter
**Instructions:** Create a new array with only even numbers from `[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]`.
**Expected Output:** [2, 4, 6, 8, 10]
**Reference:** [Array Filter Method](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)

### Challenge 25: String Palindrome
**Instructions:** Check if "racecar" is a palindrome using loops.
**Expected Output:** true
**Reference:** [Palindrome Algorithm](https://www.geeksforgeeks.org/check-if-a-string-is-palindrome/)

### Challenge 26: Number Guessing Game
**Instructions:** Simulate a number guessing game where the computer "guesses" numbers 1-10 until it finds the target (7).
**Expected Output:** Guessed 1, Guessed 2, ... Guessed 7, Found it!
**Reference:** [Random Number Generation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random)

### Challenge 27: Matrix Addition
**Instructions:** Add two 2x2 matrices using nested loops.
```javascript
matrix1 = [[1, 2], [3, 4]]
matrix2 = [[5, 6], [7, 8]]
// Result: [[6, 8], [10, 12]]
```
**Reference:** [Matrix Operations](https://www.mathsisfun.com/algebra/matrix-introduction.html)

### Challenge 28: Word Counter
**Instructions:** Count occurrences of each word in "the quick brown fox jumps over the lazy dog".
**Expected Output:** {the: 2, quick: 1, brown: 1, ...}
**Reference:** [String Split Method](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split)

### Challenge 29: Binary Converter
**Instructions:** Convert decimal number 10 to binary using loops.
**Expected Output:** "1010"
**Reference:** [Binary Number System](https://en.wikipedia.org/wiki/Binary_number)

### Challenge 30: Caesar Cipher
**Instructions:** Implement a Caesar cipher with shift of 3 for "hello".
**Expected Output:** "khoor"
**Reference:** [Caesar Cipher](https://en.wikipedia.org/wiki/Caesar_cipher)

### Challenge 31: Array Rotation
**Instructions:** Rotate array `[1, 2, 3, 4, 5]` to the right by 2 positions.
**Expected Output:** [4, 5, 1, 2, 3]
**Reference:** [Array Rotation Algorithms](https://www.geeksforgeeks.org/array-rotation/)

### Challenge 32: Bubble Sort
**Instructions:** Implement bubble sort for array `[64, 34, 25, 12, 22, 11, 90]`.
**Expected Output:** [11, 12, 22, 25, 34, 64, 90]
**Reference:** [Bubble Sort Algorithm](https://en.wikipedia.org/wiki/Bubble_sort)

### Challenge 33: Pascal's Triangle
**Instructions:** Generate the first 5 rows of Pascal's triangle.
```
    1
   1 1
  1 2 1
 1 3 3 1
1 4 6 4 1
```
**Reference:** [Pascal's Triangle](https://en.wikipedia.org/wiki/Pascal%27s_triangle)

### Challenge 34: Anagram Checker
**Instructions:** Check if "listen" and "silent" are anagrams using loops.
**Expected Output:** true
**Reference:** [Anagram Algorithms](https://www.geeksforgeeks.org/check-whether-two-strings-are-anagram-of-each-other/)

### Challenge 35: Digital Root
**Instructions:** Find the digital root of 9875 (9+8+7+5=29, 2+9=11, 1+1=2).
**Expected Output:** 2
**Reference:** [Digital Root](https://en.wikipedia.org/wiki/Digital_root)

### Challenge 36: Spiral Matrix
**Instructions:** Create a 3x3 spiral matrix starting from 1.
```
1 2 3
8 9 4
7 6 5
```
**Reference:** [Spiral Matrix Algorithm](https://www.geeksforgeeks.org/print-a-given-matrix-in-spiral-form/)

### Challenge 37: Longest Common Subsequence
**Instructions:** Find the length of LCS between "ABCDGH" and "AEDFHR".
**Expected Output:** 3 (ADH)
**Reference:** [Longest Common Subsequence](https://en.wikipedia.org/wiki/Longest_common_subsequence_problem)

### Challenge 38: Roman Numeral Converter
**Instructions:** Convert 1994 to Roman numerals using loops.
**Expected Output:** "MCMXCIV"
**Reference:** [Roman Numerals](https://en.wikipedia.org/wiki/Roman_numerals)

### Challenge 39: Sieve of Eratosthenes
**Instructions:** Find all prime numbers up to 30 using the Sieve of Eratosthenes.
**Expected Output:** [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]
**Reference:** [Sieve of Eratosthenes](https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes)

### Challenge 40: Maze Path Finder
**Instructions:** Find a path through a simple 3x3 maze using loops.
```
S . #
. . #
# . E
```
Where S=Start, E=End, #=Wall, .=Path
**Reference:** [Maze Solving Algorithms](https://www.geeksforgeeks.org/rat-in-a-maze-backtracking-2/)

### Challenge 41: Josephus Problem
**Instructions:** Solve the Josephus problem for 7 people with k=3.
**Expected Output:** Position 4 survives
**Reference:** [Josephus Problem](https://en.wikipedia.org/wiki/Josephus_problem)

### Challenge 42: Knapsack Problem (0/1)
**Instructions:** Solve 0/1 knapsack with weights [1,3,4,5] and values [1,4,5,7], capacity 7.
**Expected Output:** Maximum value = 9
**Reference:** [Knapsack Problem](https://en.wikipedia.org/wiki/Knapsack_problem)

### Challenge 43: Levenshtein Distance
**Instructions:** Calculate edit distance between "kitten" and "sitting".
**Expected Output:** 3
**Reference:** [Levenshtein Distance](https://en.wikipedia.org/wiki/Levenshtein_distance)

### Challenge 44: Sudoku Validator
**Instructions:** Validate if a 9x9 Sudoku grid is valid using loops.
**Reference:** [Sudoku Rules](https://en.wikipedia.org/wiki/Sudoku)

### Challenge 45: Tower of Hanoi
**Instructions:** Solve Tower of Hanoi for 3 disks using iterative approach.
**Expected Output:** List of moves
**Reference:** [Tower of Hanoi](https://en.wikipedia.org/wiki/Tower_of_Hanoi)

---

## Advanced Challenges

### Challenge 46: N-Queens Problem
**Instructions:** Solve the N-Queens problem for N=4 using backtracking with loops.
**Expected Output:** All valid board configurations
**Reference:** [N-Queens Problem](https://en.wikipedia.org/wiki/Eight_queens_puzzle)

### Challenge 47: Graph Traversal (DFS)
**Instructions:** Implement iterative Depth-First Search using a stack and loops.
**Reference:** [Depth-First Search](https://en.wikipedia.org/wiki/Depth-first_search)

### Challenge 48: Graph Traversal (BFS)
**Instructions:** Implement Breadth-First Search using a queue and loops.
**Reference:** [Breadth-First Search](https://en.wikipedia.org/wiki/Breadth-first_search)

### Challenge 49: Dijkstra's Algorithm
**Instructions:** Find shortest path in a weighted graph using Dijkstra's algorithm.
**Reference:** [Dijkstra's Algorithm](https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm)

### Challenge 50: Convex Hull (Graham Scan)
**Instructions:** Find convex hull of a set of points using Graham scan algorithm.
**Reference:** [Graham Scan](https://en.wikipedia.org/wiki/Graham_scan)

### Challenge 51: Fast Fourier Transform
**Instructions:** Implement iterative FFT algorithm using loops.
**Reference:** [Fast Fourier Transform](https://en.wikipedia.org/wiki/Fast_Fourier_transform)

### Challenge 52: Manacher's Algorithm
**Instructions:** Find all palindromic substrings in linear time using Manacher's algorithm.
**Reference:** [Manacher's Algorithm](https://en.wikipedia.org/wiki/Longest_palindromic_substring)

### Challenge 53: KMP String Matching
**Instructions:** Implement Knuth-Morris-Pratt string matching algorithm.
**Reference:** [KMP Algorithm](https://en.wikipedia.org/wiki/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm)

### Challenge 54: Rabin-Karp Algorithm
**Instructions:** Implement Rabin-Karp string matching using rolling hash.
**Reference:** [Rabin-Karp Algorithm](https://en.wikipedia.org/wiki/Rabin%E2%80%93Karp_algorithm)

### Challenge 55: Topological Sort
**Instructions:** Implement topological sorting using Kahn's algorithm with loops.
**Reference:** [Topological Sorting](https://en.wikipedia.org/wiki/Topological_sorting)

### Challenge 56: Union-Find (Disjoint Set)
**Instructions:** Implement Union-Find data structure with path compression.
**Reference:** [Disjoint Set Union](https://en.wikipedia.org/wiki/Disjoint-set_data_structure)

### Challenge 57: Segment Tree
**Instructions:** Build and query a segment tree for range sum queries.
**Reference:** [Segment Tree](https://en.wikipedia.org/wiki/Segment_tree)

### Challenge 58: Fenwick Tree (Binary Indexed Tree)
**Instructions:** Implement Fenwick tree for efficient prefix sum queries.
**Reference:** [Fenwick Tree](https://en.wikipedia.org/wiki/Fenwick_tree)

### Challenge 59: Trie Implementation
**Instructions:** Build a trie (prefix tree) and implement search operations.
**Reference:** [Trie Data Structure](https://en.wikipedia.org/wiki/Trie)

### Challenge 60: Suffix Array
**Instructions:** Build suffix array using counting sort approach.
**Reference:** [Suffix Array](https://en.wikipedia.org/wiki/Suffix_array)

### Challenge 61: Minimum Spanning Tree (Kruskal's)
**Instructions:** Find MST using Kruskal's algorithm with Union-Find.
**Reference:** [Kruskal's Algorithm](https://en.wikipedia.org/wiki/Kruskal%27s_algorithm)

### Challenge 62: Maximum Flow (Ford-Fulkerson)
**Instructions:** Find maximum flow in a network using Ford-Fulkerson method.
**Reference:** [Ford-Fulkerson Algorithm](https://en.wikipedia.org/wiki/Ford%E2%80%93Fulkerson_algorithm)

### Challenge 63: Traveling Salesman (Dynamic Programming)
**Instructions:** Solve TSP using dynamic programming with bitmasks.
**Reference:** [Traveling Salesman Problem](https://en.wikipedia.org/wiki/Travelling_salesman_problem)

### Challenge 64: Edit Distance with Operations
**Instructions:** Find minimum edit distance with custom operation costs.
**Reference:** [Edit Distance](https://en.wikipedia.org/wiki/Edit_distance)

### Challenge 65: Longest Increasing Subsequence
**Instructions:** Find LIS using dynamic programming in O(n log n) time.
**Reference:** [Longest Increasing Subsequence](https://en.wikipedia.org/wiki/Longest_increasing_subsequence)

### Challenge 66: Matrix Chain Multiplication
**Instructions:** Find optimal parenthesization for matrix chain multiplication.
**Reference:** [Matrix Chain Multiplication](https://en.wikipedia.org/wiki/Matrix_chain_multiplication)

### Challenge 67: Palindrome Partitioning
**Instructions:** Find minimum cuts needed to partition string into palindromes.
**Reference:** [Palindrome Partitioning](https://en.wikipedia.org/wiki/Palindrome_partitioning)

### Challenge 68: Heavy-Light Decomposition
**Instructions:** Implement heavy-light decomposition for tree path queries.
**Reference:** [Heavy-Light Decomposition](https://cp-algorithms.com/graph/hld.html)

### Challenge 69: Persistent Segment Tree
**Instructions:** Implement persistent segment tree for historical queries.
**Reference:** [Persistent Data Structures](https://en.wikipedia.org/wiki/Persistent_data_structure)

### Challenge 70: Aho-Corasick Algorithm
**Instructions:** Implement multi-pattern string matching using Aho-Corasick.
**Reference:** [Aho-Corasick Algorithm](https://en.wikipedia.org/wiki/Aho%E2%80%93Corasick_algorithm)

---

## Additional Resources

### General Programming Resources
- [MDN JavaScript Loops](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Loops_and_iteration)
- [JavaScript.info Loops](https://javascript.info/while-for)
- [W3Schools JavaScript Loops](https://www.w3schools.com/js/js_loop_for.asp)

### Algorithm Resources
- [GeeksforGeeks Algorithms](https://www.geeksforgeeks.org/fundamentals-of-algorithms/)
- [LeetCode Practice Problems](https://leetcode.com/)
- [HackerRank Algorithms](https://www.hackerrank.com/domains/algorithms)
- [Coursera Algorithms Specialization](https://www.coursera.org/specializations/algorithms)

### Advanced Topics
- [CP-Algorithms](https://cp-algorithms.com/)
- [CLRS Introduction to Algorithms](https://mitpress.mit.edu/books/introduction-algorithms-third-edition)
- [Competitive Programming Handbook](https://cses.fi/book/book.pdf)

---

## Tips for Success

1. **Start Simple:** Begin with basic challenges and gradually increase complexity
2. **Understand Time Complexity:** Learn Big O notation for algorithm analysis
3. **Practice Regularly:** Consistent practice is key to mastering loops and algorithms
4. **Debug Systematically:** Use console.log() to trace your loop execution
5. **Optimize Later:** Get the solution working first, then optimize
6. **Learn Patterns:** Many problems follow similar algorithmic patterns
7. **Test Edge Cases:** Always test with empty inputs, single elements, and large datasets

Happy coding! 🚀
